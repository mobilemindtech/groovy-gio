/*
 * This source file was generated by the Gradle 'init' task
 */
package gio

import gio.ast.ForM
import gio.io.GIO
import gio.io.IO
import gio.runtime.GIOApp
import gio.syntax.GIOExtensions
import spock.lang.Specification

import static gio.syntax.ForM.forM

class SequenceEffects implements GIOApp<Integer> {
    IO<Integer> run() {
        GIO.pure (1).flatMap {
            value -> GIO.pure(value + 1)
        }
    }
}

class GIOTest extends Specification {
    /*
    def "gio exec return 1"() {
        setup:
        def app = new SequenceEffects()

        when:
        def result = app.unsafeRun()

        then:
        result == 2
    }*/

    def "gio forM"() {
        setup:


        when:
            @ForM
            def result = forM(Integer) {
                GIO.puts("start")
                x = GIO.pure(1)
                y = GIO.pure(1)
                GIO.puts({ "end $x $y" })
                guard { x > 0 }
                yield { x + y }
            }


        then:
        try{
            use(GIOExtensions) {
                result.unsafeRun()
            }  == 2
        }catch(Throwable t){
            t.printStackTrace()
        }
    }
/*
    def "gio forM IO"() {
        setup:


        when:
        def result = forM(Integer) {
            x = GIO.pure(1) >> { it + 2 }
            yield { x }
        }

        then:
        result.ok && result.value == 3
    }

 */
}
